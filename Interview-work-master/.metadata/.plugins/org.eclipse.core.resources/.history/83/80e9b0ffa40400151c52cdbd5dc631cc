
public class CircularLinkedList {
	public class Node{
		int data;
		Node next;
	}
	public class node{
		int data;
		node next;
	}
	
	public static void printCircularList(Node head){
		Node cur = head;
		while(cur != null){
			System.out.print(cur.data + "->");
			cur = cur.next;
			if(cur == head){
				break;
			}
		}
		System.out.println("(" + cur.data + ")headNode"); 
		
	}
	
	public static void insertAtEndInCLL(Node head, Node nodeToInsert){
		Node cur = head;
		while(cur.next != head){
			cur.next = cur.next.next;
		}
		nodeToInsert.next = nodeToInsert;
		if(head == null){
			head = nodeToInsert;
		}else{
			nodeToInsert.next = head;
			cur.next = nodeToInsert;
		}
	}
	
	//Delete last node of CLL
	public static void DeleteLastNodeFromCLL(Node head){
		Node temp = head;
		Node cur = head;
		if(head == null){
			System.out.println("Empty");
			return;
		} 
		while(cur.next != head){
			temp = cur;
			cur = cur.next;
		}
		
		cur = null;
		return;
		
	}
	
	public static Node reverse(Node head) {
		  // if head is null or only one node, it's reverse of itself.
		  if ( (head==null) || (head.next == null) ) return head;

		  // reverse the sub-list leaving the head node.
		  Node reverse = reverse(head.next);

		  // head.next still points to the last element of reversed sub-list.
		  // so move the head to end.
		  head.next.next = head;

		  // point last node to nil, (get rid of cycles)
		  head.next = null;
		  return reverse;
	}

}
